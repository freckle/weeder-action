#!/usr/bin/env ruby
require "json"
require "yaml"

RELEASE_NAME = "Binaries"

EXISTING_ASSETS =
  if ENV["WEEDER_BINARIES_OVERWRITE"] == "1"
    []
  else
    JSON.parse(`
      gh --repo freckle/weeder-action release view #{RELEASE_NAME} --json assets |
        jq '.assets | map(.name)'
    `)
  end

Asset = Struct.new(:os, :os_attributes, :ghc, :ghc_attributes) do
  def name
    "weeder-#{ghc}-#{os}-x64.#{os_attributes.fetch("ext")}"
  end

  def include
    { asset: name, ghc: ghc, release: RELEASE_NAME }.
      merge(os_attributes).
      merge(ghc_attributes)
  end

  def needed?
    !EXISTING_ASSETS.include?(name)
  end
end

def generate_matrix
  binaries = YAML.load_file("binaries.yaml")
  oses = binaries.fetch("oses")
  ghcs = binaries.fetch("ghcs")

  assets = oses.flat_map do |os, os_attributes|
    ghcs.map do |ghc, ghc_attributes|
      Asset.new(os, os_attributes, ghc.sub(/^ghc-/, ""), ghc_attributes)
    end
  end.filter(&:needed?)

  if assets.empty?
    {
      asset: ["none"],
      include: [{
        asset: "none",
        runner: "ubuntu-latest"
      }]
    }
  else
    {
      asset: assets.map(&:name),
      include: assets.map(&:include)
    }
  end
end

puts JSON.dump(generate_matrix)
